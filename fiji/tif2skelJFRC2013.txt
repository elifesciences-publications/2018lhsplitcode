// "toskelnrrd.txt"
//
// This macro batch processes all the lsm files in a folder
// saving them as nrrd or pic files.
// Limitations/Specifics
// 1) Only works with Fiji
// 2) No attempt is made to reorder channels
// 3) Uses file locking when called with a directory as input, but NOT when
//    called with a specific input file
//    (in which case we assume that someone else is handling this issue)
//
// (Slightly) Adapted by Greg Jefferis from code at
// http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt

// jefferis@gmail.com

/* Run from the command line as follows
fiji -eval '
runMacro("/GD/LMBD/Papers/2018lhsplitcode/fiji/tif2skelJFRC2013.txt",
"/Volumes/Neuronaut1/LHsplits/segs/,/Volumes/Neuronaut1/LHsplits/skels/");
' -batch --headless
*/

requires("1.42k");
file = getArgument;
dir=""
outputDir=""
outputformat="nrrd" // or pic
useLocksAndCheckOutput = true; // by default

//print("file = "+file);
if (file!=""){
	arg = split(file,",");
		if (arg.length!=2) {
		exit();
	} else if(arg[0]=="" || arg[1]==""){
		exit();
	} else {
		outputDir=arg[1];
		if(!endsWith(outputDir,"/")) outputDir=outputDir+"/";

		if(File.isDirectory(arg[0])) {
			// we're dealing with a directory
			dir=arg[0];
			if(!endsWith(dir,"/")) dir=dir+"/";
		} else {
			// single file
			dir=File.getParent(arg[0])+"/";
			file=File.getName(arg[0]);
			processFile(dir,outputDir,file);
			exit();
		}
	}
}

if(dir=="") dir = getDirectory("stacks directory");
if(outputDir=="") outputDir = getDirectory("output directory");


// 3) Process files in the chosen directories
// --------------------------------------
count = 0;
countFiles(dir);
print("Total files: "+count);
n = 0;
processFiles(dir, outputDir);

// 4) Function definitions
// --------------------------------------

function countFiles(dir) {
		list = getFileList(dir);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
            countFiles(""+dir+list[i]);
	else
		count++;
	}
}

function processFiles(dir,outputDir) {
	list = getFileList(dir);
	// Stops multiple processes racing each other to do the same file
	shuffle(list);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
			processFiles(""+dir+list[i], outputDir+list[i]);
		else {
			showProgress(n++, count);
			processFile(dir,outputDir,list[i]);
		}
	}
}

function processFile(dir,outputDir,file) {
	if (!endsWith(file, "skel.nrrd")) {
		path = dir+file;
		outfile=substring(file,0,lastIndexOf(file,"."))+'_skel.nrrd';
		outpath=outputDir+outfile;
		lockpath=outputDir+outfile+'.lock';
		if(File.exists(outpath)){
			print("Skipping file: " + file + " since " + outfile + " already exists");
			return;
		}
		if(File.exists(lockpath)){
			print("Skipping file: " + file + " since someone else is working on it");
			return;
		}
		// check that final output dir exists
		lockdir=File.getParent(lockpath);
		if(!File.exists(lockdir)) {
			print("making output dir:"+lockdir);
			recursive_makedir(lockdir);
		}
		
		File.saveString("",lockpath)
		print("Inpath = "+path);
		print("Outpath = "+outpath);
		print("lockpath = "+lockpath);

		open(path);
		processImage();
		setKeyDown("alt");
		run("Nrrd ... ", "nrrd=[" + outpath + "]");
		setKeyDown("none");
		close();
		File.delete(lockpath);
	}
}


function processImage() {
  run("Properties...", "channels=1 slices=436 frames=1 unit=microns pixel_width=0.3800000 pixel_height=0.3800000 voxel_depth=0.3800000");
  run("Scale...", "x=0.5 y=0.5 z=0.5 width=725 height=362 depth=218 interpolation=Bilinear average process");
  run("Skeletonize (2D/3D)");
}

function shuffle(array) {
   n = array.length;  // The number of items left to shuffle (loop invariant).
   while (n > 1) {
      k = randomInt(n);     // 0 <= k < n.
      n--;                  // n is now the last pertinent index;
      temp = array[n];  // swap array[n] with array[k] (does nothing if k==n).
      array[n] = array[k];
      array[k] = temp;
   }
}

// returns a random number, 0 <= k < n
function randomInt(n) {
   return n * random();
}

function recursive_makedir(d) {
	exec("mkdir", "-p", d);
}